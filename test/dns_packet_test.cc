// These could do with quite a bit more fleshing out.
#include "dns_packet.h"
#include <gtest/gtest.h>
#include <stdint.h>
#include <string>

using namespace std;

TEST(DNSPacket, DecodeEncodeCompareAReq) {
  // A google.com.
  uint8_t req[] = {
    0xe7, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 
    0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01 };

  DNSPacket p;
  ASSERT_TRUE(p.ReadDNS((char *)req, (char *)req + sizeof(req)));
  printf("%s\n", p.DebugString());
  char out[2048];
  int sz;
  ASSERT_TRUE(p.WriteDNS(out, out + sizeof(out), &sz));
  DebugDump((char *)req, sizeof(req));
  DebugDump(out, sz);
  ASSERT_EQ(sizeof(req), sz);
  DNSPacket q;
  ASSERT_TRUE(q.ReadDNS(out, out + sz));
  ASSERT_EQ(0, memcmp(req, out, sizeof(req)));
}

TEST(DNSPacket, DecodeEncodeCompareResp) {
  uint8_t resp[] = { 0xe7, 0x34, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0,
    0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x04, 0xd8,
    0x3a, 0xdc, 0x64 };

  DNSPacket p;
  ASSERT_TRUE(p.ReadDNS((char *)resp, (char *)resp + sizeof(resp)));
  char out[2048];
  int sz;
  ASSERT_TRUE(p.WriteDNS(out, out + sizeof(out), &sz));
  DNSPacket q;
  ASSERT_TRUE(q.ReadDNS(out, out + sz));
  ASSERT_EQ(sizeof(resp), sz);
  ASSERT_EQ(0, memcmp(resp, out, sizeof(resp)));
}

// AAAA google.com.
//0xcb, 0x7c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01,                 
//0xcb, 0x7c, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x10, 0x24, 0x04, 0x68, 0x00, 0x40, 0x06, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04,                              

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
